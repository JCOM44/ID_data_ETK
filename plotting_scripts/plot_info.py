import matplotlib.pyplot as plt
import os, sys
import numpy as np
import matplotlib.ticker as mticker
from matplotlib import rc



# Plot basic stuff
fontsize  = 10
linewidth = 1
rc('text', usetex=True)
rc('font', family='serif')
rc('font', serif='palatino')
#rc('font', weight='bolder')
rc('mathtext', default='sf')
rc("lines", markeredgewidth=1)
rc("lines", linewidth=linewidth)
rc('axes', labelsize=fontsize)
rc("axes", linewidth=(linewidth+1)//2)
rc('xtick', labelsize=fontsize)
rc('ytick', labelsize=fontsize)
rc('legend', fontsize=fontsize)
rc('xtick.major', pad=8)
rc('ytick.major', pad=8)

# constants, in SI
G = 6.673e-11       # m^3/(kg s^2)
c = 299792458       # m/s
M_sol = 1.98892e30  # kg
# convertion factors
M_to_ms = 1./(1000*M_sol*G/(c*c*c))
M_to_density = c**5 / (G**3 * M_sol**2) # kg/m^3



def set_tick_sizes(ax, major, minor):
    for l in ax.get_xticklines() + ax.get_yticklines():
        l.set_markersize(major)
    for tick in ax.xaxis.get_minor_ticks() + ax.yaxis.get_minor_ticks():
        tick.tick1line.set_markersize(minor)
        tick.tick2line.set_markersize(minor)
    ax.xaxis.LABELPAD=10.
    ax.xaxis.OFFSETTEXTPAD=10.


# get info on the simulation properties for a given quantity
def get_info(thorn,quantity, folder):
        print("Looking for files in the folder: {}".format(folder))
        os.chdir(folder)
        filex = thorn+"-"+quantity+".x.asc"
        print("Opening file: {}.....".format(filex))
        datax = np.loadtxt(filex, comments='#')
        print("Reading file....")
        
        # Number of iterations
        it = np.unique(datax[:, 0])
        it_n = len(it)
        print("Number of iterations:", it_n)
        
        # Time values
        t = np.unique(datax[:, 8])
        t_n = len(t)
        print("Number of different time values:", t_n)

        # Refinement levels
        rl = np.unique(datax[:, 2])
        rl_n = len(rl)
        print("Total number of refinement levels:", rl_n)

        # Points
        x_p = np.unique(datax[:, 9])
        x_p_n = len(x_p)
        print("Total number of points:", x_p_n)


        points_per_rl = []
        rl_max_point = []
        for i in range(rl_n):
            x_in_rl = np.unique(datax[datax[:, 2] == rl[i], 9])
            points_in_rl = len(x_in_rl)
            print("Number of points in refinement level", i, ":", points_in_rl)
            rl_max_point.append(np.max(x_in_rl))
            points_per_rl.append(points_in_rl)
        rl_max_point.append(0.0)
        
        return t,x_p,rl,rl_n,datax


# FUNCTION TO GET TIMESRIES for a specific quantity, needs as input the output generated by get_info
def fx_timeseries(t,x_p,datax,ixd=0):     #index value of x as input
    #create output lists
    print(os.getcwd())
    t_n = len(t)
    time_values = []
    f_xt_values = []
    print("Calculating timeseries for x = {}".format(x_p[ixd]))
 # create filter for time steps
    for j in range(t_n): 
        t_index = datax[:,8] == t[j]
 #create new array only with x and data columns for given t
        f_x_ti = np.vstack(  (datax[t_index,8],  datax[t_index,9]  , datax[t_index,12]  ))  #now x=f_x_ti[0][:] and f(x)=f_x_ti[1][:]
 #create filter for space points
        x_index = f_x_ti[1][:] == x_p[ixd]

 # save t, x and f(x,t) in a list (use lists to improve efficiency when extending)
        tj = (f_x_ti[0][x_index]).tolist()
        f_xi_tj = (f_x_ti[2][x_index]).tolist()

 #append values
        time_values.extend(tj)
        f_xt_values.extend(f_xi_tj)
        if(j==np.round(1/4*t_n) or j==np.round(1/2*t_n)) or j==np.round(3/4*t_n):
                print("Progress: {} %".format(j/t_n *100))
    return time_values,f_xt_values



# plots

def plot_funcs(t_rho,rho,t_phi,phi,plot_dir=os.getcwd()):
    fig, ax = plt.subplots(1,2,figsize=(16, 10))

    fig.subplots_adjust(top=0.85, bottom=0.16, left=0.11,right=0.97)

    #ax = fig.add_subplot(1,1,1)
    xlim = (0,1)
    ylim = (-0.003,0)
    
    # Plot density

    ax[0].plot(t_rho,rho, linestyle='-.', color='blue', label = r"$DEF \, beta = -5$")                   #BINAC


    # Plot scalar field

    ax[1].plot(t_phi,phi, linestyle='-', color='blue', label = r"$BIN, \, k_0 = 0.001$")


    #ax.grid(True)

    # plot properties
    #ax.set_xlim(xlim)
    #ax.set_ylim(ylim) 

    #plt.title('PSD', fontsize=fontsize)

    ax[0].set_xlabel(r't [M]')
    ax[0].xaxis.set_major_locator(mticker.MaxNLocator(7))
    ax[0].xaxis.set_minor_locator(mticker.MaxNLocator(14))
    ax[0].xaxis.grid(False)
    ax[1].set_xlabel(r't [M]')
    ax[1].xaxis.set_major_locator(mticker.MaxNLocator(7))
    ax[1].xaxis.set_minor_locator(mticker.MaxNLocator(14))
    ax[1].xaxis.grid(False)
    ax2 = ax[0].twiny()
    ax2.set_xlabel(r't [ms]')
    ax2.set_xlim((ax[0].get_xlim()[0]/M_to_ms, ax[0].get_xlim()[1]/M_to_ms))
    ax2.xaxis.set_major_locator(mticker.MaxNLocator(7))
    ax2.xaxis.set_minor_locator(mticker.MaxNLocator(14))
    ax3 = ax[1].twiny()
    ax3.set_xlabel(r't [ms]')
    ax3.set_xlim((ax[1].get_xlim()[0]/M_to_ms, ax[1].get_xlim()[1]/M_to_ms))
    ax3.xaxis.set_major_locator(mticker.MaxNLocator(7))
    ax3.xaxis.set_minor_locator(mticker.MaxNLocator(14))
    ax[0].set_ylabel(r'$\rho_c(t)$')
    ax[0].yaxis.set_major_locator(mticker.MaxNLocator(8))
    ax[0].yaxis.set_minor_locator(mticker.MaxNLocator(10))
    ax[0].yaxis.grid(True)
    set_tick_sizes(ax[0], 8, 8)
    ax[1].legend(loc='upper right', fontsize=fontsize)
    ax[1].set_ylabel(r'$\phi_c(t)$')
    ax[1].yaxis.set_major_locator(mticker.MaxNLocator(8))
    ax[1].yaxis.set_minor_locator(mticker.MaxNLocator(10))
    ax[1].yaxis.grid(True)
    set_tick_sizes(ax[1], 8, 8)
    #ax[1].legend(loc='upper right', fontsize=fontsize)
    ax[0].set_title(r'Central density')
    ax[1].set_title(r'Central scalar field')



    name = "plot1"
    #os.chdir(plots_dir)
    #fig.savefig("phi_min.jpeg")
    os.chdir(plot_dir)
    plt.savefig("{}.png".format(name))
