
void calculate_Kphi (CCTK_ARGUMENTS);
void 
calculate_Kphi (CCTK_ARGUMENTS){

  DECLARE_CCTK_ARGUMENTS;
  DECLARE_CCTK_PARAMETERS;


  /*=========== derivatives and advective derivatives ====*/
  CCTK_REAL     dphi_x,dphi_y,dphi_z;

  CCTK_REAL dx12,dy12,dz12;

  CCTK_INFO("=== Calculating Kphi... ===");
  /*========= Define delta_xi =========*/
  dx12 = 12;/*CCTK_DELTA_SPACE(1);*/
  dy12 = 12;/*CCTK_DELTA_SPACE(2);*/
  dz12 = 12;/*CCTK_DELTA_SPACE(3);*/

  CCTK_INT imin[3], imax[3];
  for (int d = 0; d < 3; ++ d)
  {
    imin[d] = 0;
    imax[d] = cctk_lsh[d];
  }

  for (int k = imin[2]; k < imax[2]; ++k)
  {
   for (int j = imin[1]; j < imax[1]; ++j)
   {
    for (int i = imin[0]; i < imax[0]; ++i)
    {

     const int ind = CCTK_GFINDEX3D (cctkGH, i, j, k);



  /*====== calculate derivatives =======*/
  


   dphi_x = (   8*phi1[CCTK_GFINDEX3D (cctkGH, i+1, j, k)]		
	  	- phi1[CCTK_GFINDEX3D (cctkGH, i+2, j, k)] 
	  	- 8*phi1[CCTK_GFINDEX3D (cctkGH, i-1, j, k)]
	  	+ phi1[CCTK_GFINDEX3D (cctkGH, i-2, j, k)]   ) / dx12; 
   
   dphi_y = (   8*phi1[CCTK_GFINDEX3D (cctkGH, i, j+1, k)]		
	  	- phi1[CCTK_GFINDEX3D (cctkGH, i, j+2, k)] 
	  	- 8*phi1[CCTK_GFINDEX3D (cctkGH, i, j-1, k)]
	  	+ phi1[CCTK_GFINDEX3D (cctkGH, i, j-2, k)]   ) / dy12; 

   dphi_z = (   8*phi1[CCTK_GFINDEX3D (cctkGH, i, j, k+1)]		
	  	- phi1[CCTK_GFINDEX3D (cctkGH, i, j, k+2)] 
	  	- 8*phi1[CCTK_GFINDEX3D (cctkGH, i, j, k-1)]
	  	+ phi1[CCTK_GFINDEX3D (cctkGH, i, j, k-2)]   ) / dz12; 
   
    Kphi1[ind] = 1/(2*alp[ind]) * (betax[ind] * dphi_x 
		    	+ betay[ind] * dphi_y 
			+ betaz[ind] * dphi_z );

	}
     }
  }
}
